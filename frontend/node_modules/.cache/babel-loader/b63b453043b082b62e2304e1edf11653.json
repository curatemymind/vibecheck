{"ast":null,"code":"var _jsxFileName = \"/Users/lexiewebel/Desktop/vibecheck/frontend/src/pages/AxiosExample.js\";\nimport React from 'react';\nimport '../vibecheck.css';\nimport { Redirect } from \"react-router-dom\";\nimport Select from 'react-select';\nimport makeAnimated from 'react-select/animated';\nimport './loginsignup.css';\nimport axios from 'axios';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nconst genres = [];\nconst animatedComponents = makeAnimated();\n\nclass AxiosExample extends React.Component {\n  //the states of emotion and source will be set to null initially until the user had filled out the form.\n  constructor() {\n    super();\n    this.state = {\n      example: null,\n      exampleArray: []\n    };\n  }\n\n  componentDidMount() {\n    //creates a k,v pair list for genres that will be fed into react-select\n    axios.get(`http://localhost:5000/example`).then(response => {\n      //alert(response.data.data)\n      this.setState({\n        example: response.data.data\n      });\n    }).catch(error => {\n      alert(\"There was an error connecting to the api\");\n      console.error(error);\n    }); //secong get request\n\n    axios.get(`http://localhost:5000/exampleArray`).then(response => {\n      //alert(response.data.data)\n      //we have to set a temp array and then set that equal to that state\n      //this is beacause state arrays have no simple push feature, only setState\n      var mack = [];\n\n      for (var i = 0; i < response.data.data.length; i++) {\n        mack.push(response.data.data[i]);\n      }\n\n      this.setState({\n        exampleArray: mack\n      });\n    }).catch(error => {\n      //alert(\"There was an error connecting to the api\")\n      console.error(error);\n    });\n  }\n\n  render() {\n    return (\n      /*#__PURE__*/\n      // <div >\n      //   <a href=\"http://localhost:3000/playlist\">Create a New Playlist</a>\n      //   <br></br>\n      //   <a href=\"http://localhost:3000/\">Logout</a>\n      //   {/*In React, map is the equivalent of a loop for html. it requires (key, value) assignments*/}\n      //     <ul id=\"menu\">\n      //     {this.state.exampleArray.map((item, key) =>\n      //       <div>\n      //         <h2> Playlist Name: {item[0]}</h2>\n      //         <h2> Vibe: {item[1]} </h2>\n      //         <h2> Duration: {item[2]} </h2>\n      //         <h2>Songs:</h2>\n      //         {(item[3]).map((song, key2) =>\n      //         <li>{song}</li>\n      //         )}\n      //         <br></br>\n      //       </div>\n      //     )}\n      //   </ul>\n      // </div>\n      React.createElement(Accordion, {\n        defaultActiveKey: \"0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 3\n        }\n      }, /*#__PURE__*/React.createElement(Card.Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(Accordion.Toggle, {\n        as: Button,\n        variant: \"link\",\n        eventKey: \"0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 7\n        }\n      }, \"Click me!\")), /*#__PURE__*/React.createElement(Accordion.Collapse, {\n        eventKey: \"0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 7\n        }\n      }, \"Hello! I'm the body\"))), /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 3\n        }\n      }, /*#__PURE__*/React.createElement(Card.Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(Accordion.Toggle, {\n        as: Button,\n        variant: \"link\",\n        eventKey: \"1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 7\n        }\n      }, \"Click me!\")), /*#__PURE__*/React.createElement(Accordion.Collapse, {\n        eventKey: \"1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 7\n        }\n      }, \"Hello! I'm another body\"))))\n    );\n  }\n\n}\n\nexport default AxiosExample;","map":{"version":3,"sources":["/Users/lexiewebel/Desktop/vibecheck/frontend/src/pages/AxiosExample.js"],"names":["React","Redirect","Select","makeAnimated","axios","Accordion","Card","Button","genres","animatedComponents","AxiosExample","Component","constructor","state","example","exampleArray","componentDidMount","get","then","response","setState","data","catch","error","alert","console","mack","i","length","push","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../vibecheck.css';\nimport { Redirect } from \"react-router-dom\";\nimport Select from 'react-select';\nimport makeAnimated from 'react-select/animated';\nimport './loginsignup.css';\nimport axios from 'axios';\nimport Accordion from 'react-bootstrap/Accordion'\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\n\nconst genres = []\nconst animatedComponents = makeAnimated();\nclass AxiosExample extends React.Component {\n\n  //the states of emotion and source will be set to null initially until the user had filled out the form.\n  constructor() {\n    super();\n    this.state = {\n      example: null,\n      exampleArray: []\n    };\n  }\n\n  componentDidMount() {\n\n    //creates a k,v pair list for genres that will be fed into react-select\n    axios.get(`http://localhost:5000/example`)\n      .then((response) => {\n        //alert(response.data.data)\n\n        this.setState({\n          example: response.data.data\n        });\n\n      }).catch((error) => {\n        alert(\"There was an error connecting to the api\")\n        console.error(error);\n      });\n\n    //secong get request\n    axios.get(`http://localhost:5000/exampleArray`)\n      .then((response) => {\n        //alert(response.data.data)\n        //we have to set a temp array and then set that equal to that state\n        //this is beacause state arrays have no simple push feature, only setState\n        var mack = []\n    \n        for (var i = 0; i < response.data.data.length; i++) {\n          mack.push(response.data.data[i])\n        }\n       \n        this.setState({\n          exampleArray: mack,\n        \n        });\n\n      }).catch((error) => {\n        //alert(\"There was an error connecting to the api\")\n        console.error(error);\n      });\n  }\n\n  render() {\n\n    return (\n      // <div >\n      //   <a href=\"http://localhost:3000/playlist\">Create a New Playlist</a>\n      //   <br></br>\n      //   <a href=\"http://localhost:3000/\">Logout</a>\n\n      //   {/*In React, map is the equivalent of a loop for html. it requires (key, value) assignments*/}\n      //     <ul id=\"menu\">\n      //     {this.state.exampleArray.map((item, key) =>\n      //       <div>\n      //         <h2> Playlist Name: {item[0]}</h2>\n      //         <h2> Vibe: {item[1]} </h2>\n      //         <h2> Duration: {item[2]} </h2>\n      //         <h2>Songs:</h2>\n      //         {(item[3]).map((song, key2) =>\n      //         <li>{song}</li>\n      //         )}\n      //         <br></br>\n      //       </div>\n      //     )}\n      //   </ul>\n      \n      // </div>\n\n      <Accordion defaultActiveKey=\"0\">\n  <Card>\n    <Card.Header>\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\n        Click me!\n      </Accordion.Toggle>\n    </Card.Header>\n    <Accordion.Collapse eventKey=\"0\">\n      <Card.Body>Hello! I'm the body</Card.Body>\n    </Accordion.Collapse>\n  </Card>\n  <Card>\n    <Card.Header>\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\n        Click me!\n      </Accordion.Toggle>\n    </Card.Header>\n    <Accordion.Collapse eventKey=\"1\">\n      <Card.Body>Hello! I'm another body</Card.Body>\n    </Accordion.Collapse>\n  </Card>\n</Accordion>\n    )\n  }\n}\nexport default AxiosExample;\n"]},"metadata":{},"sourceType":"module"}